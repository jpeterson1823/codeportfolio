#!/usr/bin/env python3
#CreateNewChapterPage.py - creates new HTML formated chapter page for wrobelwebsite.github.io.
from PIL import Image
import os, shutil, pytesseract, re, argparse
checkPage = False
parser = argparse.ArgumentParser(description='Creates HTML Page for Wrobel Website.')
parser.add_argument('-dev', action='store_true')
parser.add_argument('-pI', action='store_true')
args = parser.parse_args()

regexMatchedString = []

htmlp1 = '''<html>
    <head>
        <link rel="stylesheet" type="text/css" href="../style.css">
        <script src="../a.js"></script>

        <title>Wrobel Biololgy II Class Book</title>
    </head>

    <body onload="init();">
        <div class="navbar">
            <a class="home" href="../home.html">Home</a>
            <div class="ch">
                <button class="chbtn">Sections<i class="fa fa-caret-down"></i></button>
                <div class="ch-content">
'''
htmlp2 = '''                </div>
            </div>
        </div>
        <div class="ch15" oncontextmenu="return false;">
'''
htmlp3 = '''        </div>
    </body>
</html>
'''


'''
Creates a PageData object with its attributes.

Attributes:
    has_section (boolean):   True when section is found, False otherwise.
    text (string):          Contains the text found in the image.
    path (string):          Path to image
    name (string):          Name of file.
'''
class PageData:         
    def __init__(self, path):
        self.path = path
        self.text = self.ocr_core(self.path)
        self.has_section = self.has_sec(self.text)
        self.name = re.compile('Chapter\d*BIO-\d*\.png').search(path).group(0)
        self.page_num = re.compile('BIO-\d*').search(self.name).group(0)[4:]

    
    def get_text(self):
        return self.text

    def get_section(self):
        return self.has_section
    
    def get_path(self):
        return self.path
    
    def get_page_num(self):
        if self.page_num[0] == '0':
            return int(self.page_num[1:])
        else:
            return int(self.page_num)

    def print_info(self):
        print('\n')
        print('*******   Page Data:   *******')
        print('File Name: '+self.name)
        print('Has Section: '+ str(self.has_section))
    
    # Reads image file and records text to string.
    def ocr_core(self,filePath):
        return pytesseract.image_to_string(Image.open(filePath))

    # Searches text string for a CONCEPT header.
    def has_sec(self,text):
        reg = re.compile('CONCEPT\s')
        global checkPage
        if checkPage == True:
            checkPage = False
            return True
        if reg.search(text):
            regexMatchedString.append(reg.search(text).group(0))
            print(reg.findall(text))
            if len(reg.findall(text)) > 1:
                return True
            else:
                checkPage = True
                return False
        else:
            return False


'''
Creates a list of PageData objects found in a folder.

Attributes:
    page_list (list):        List of PageData objects found in a folder.
    path (string):          Path to the folder.
    ch_num (int):            Chapter number

TODO:
    Loading Bar:            Should look like this:
                    [                                        ]
                                    \d*%
'''
class Folder:
    def __init__(self, path):
        self.path = path
        self.name = re.compile('Ch\d*').search(path)[0]

        pages = len(os.listdir(path))
        temp = []
        for file in os.listdir(path):
            if file[0:1] != '.':
                os.sys.stdout.flush()
                self.get_load_bar(pages)
                temp.append(PageData(path+os.sep+file))
        
        self.page_list = temp
        self.organize(self.page_list)
        self.ch_num = self.name[2:]

        if args.dev:
            file = open('/Users/john/Desktop/debugFile.txt','w+')
            file.write(str(regexMatchedString))
            for page in self.get_page_list():
                if page.get_section():
                    file.write('\n ***** Page '+str(page.get_page_num())+' Data *****\n')
                    file.write(page.get_text())
            file.close()

            file2 = open('/Users/john/Desktop/debugScan.txt', 'w+')
            file2.write('*************** Page Scanns ***************\n\n')
            for page in self.page_list:
                file2.write('\n\n ***** Page '+str(page.get_page_num())+' Text *****\n')
                file2.write(page.get_text())

        if args.pI:
            self.print_info()

    def get_load_bar(self, pages):
        number_of_notches = round((pages/40)*100)
        string = '['
        for i in range(number_of_notches):
            string += '%'
        for i in range(pages - number_of_notches):
            string += ' '
        print(string)

    def get_path(self):
        return self.path

    def get_page_list(self):
        return self.page_list

    def get_ch_num(self):
        return self.ch_num
    
    def get_num_of_sec(self):
        num = 0
        for page in self.page_list:
            if page.get_section():
                num+=1
        return num

    def organize(self, arr):
        for i in range(1, len(arr)): 
            key = arr[i] 

            # Move elements of arr[0..i-1], that are 
            # greater than key, to one position ahead 
            # of their current position 
            j = i-1
            while j >= 0 and key.get_page_num() < arr[j].get_page_num() : 
                arr[j + 1] = arr[j] 
                j -= 1
            arr[j + 1] = key 

    def print_info(self):
        print(' *********************************')
        print('* Printing info for Folder Object *')
        print(' *********************************')
        print('Folder: '+self.name)
        print('Folder Length: '+str(len(self.page_list)))

        for page in self.page_list:
            page.print_info()

'''
Creates object that contains all data for the HTML page.

Attributes:
    text (string):          Body of the file

TODO:

    Create writeToFile() method
    Create getChStr() method
    Create getTabStr() method
'''
class HTML:
    def __init__(self, folder, pathOfFile):
        self.writeToFile(folder, pathOfFile)

    def writeToFile(self, folder, path):
        file = open(path+'Chapter'+folder.get_ch_num()+'.txt', 'w+')
        file.write(htmlp1)
        file.write(self.getTabStr(folder,folder.get_num_of_sec()))
        file.write(htmlp2)
        file.write(self.getChStr(folder))
        file.write(htmlp3)
        file.close()
        os.system('mv '+'Chapter'+folder.get_ch_num()+'.txt Chapter'+folder.get_ch_num()+'.html')
    
    def getTabStr(self, folder, secNum):
        finalStr = ''
        for i in range(secNum):
            finalStr+='''                    '<a href="#sec'''+folder.get_ch_num()+'''.'''+str(i+1)+'''">Sec '''+folder.get_ch_num()+'''.'''+str(i+1)+'''</a>'''+'\n'
        return finalStr
    
    def getChStr(self,folder):
        finalStr = ''
        num = 1
        for i in range(len(folder.get_page_list())):
            #if(folder.get_page_list()[i].get_section()):
            #    if i < 10:
            #        finalStr+='''            <img id="sec'''+folder.get_ch_num()+'''.'''+str(num)+'''" src="../src/Ch'''+folder.get_ch_num()+'''/Chapter'''+folder.get_ch_num()+'''BIO-0'''+str(i+1)+'''.png" width="850" height="1000"/>'''+'\n'
            #    else:
            #        finalStr+='''            <img id="sec'''+folder.get_ch_num()+'''.'''+str(num)+'''" src="../src/Ch'''+folder.get_ch_num()+'''/Chapter'''+folder.get_ch_num()+'''BIO-'''+str(i+1)+'''.png" width="850" height="1000"/>'''+'\n'
            #    num+=1
            #else:
            #    if i < 10:
            #        finalStr+='''            <img src="../src/Ch'''+folder.get_ch_num()+'''/Chapter'''+folder.get_ch_num()+'''BIO-0'''+str(i+1)+'''.png" width="850" height="1000"/>'''+'\n'
            #    else:
            #        finalStr+='''            <img src="../src/Ch'''+folder.get_ch_num()+'''/Chapter'''+folder.get_ch_num()+'''BIO-'''+str(i+1)+'''.png" width="850" height="1000"/>'''+'\n'
            if i < 10:
                finalStr+='''            <img src="../src/Ch'''+folder.get_ch_num()+'''/Chapter'''+folder.get_ch_num()+'''BIO-0'''+str(i+1)+'''.png" width="850" height="1000"/>'''+'\n'
            else:
                finalStr+='''            <img src="../src/Ch'''+folder.get_ch_num()+'''/Chapter'''+folder.get_ch_num()+'''BIO-'''+str(i+1)+'''.png" width="850" height="1000"/>'''+'\n'
        
        return finalStr

def main():
    os.system('clear')
    
    if args.dev:
        print('~ DevMode:       ON')
    else:
        print('~ DevMode:       OFF')

    if args.pI:
        print('~ PrintInfo:     ON')
    else:
        print('~ PrintInfo:     OFF')

    print('Enter the path to the folder containing the page images:')
    path = input()
    if not os.path.isdir(path):
        print('Invalid DIR at: '+path)
        exit()

    folder = Folder(path)
    
    html_fileile = HTML(folder,'/Users/john/Desktop/')
    

if __name__ == "__main__":
    main()